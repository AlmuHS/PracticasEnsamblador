EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Pr1.3.exe_ -- emu8086 assembler version: 4.08  
 
[ 18/12/2015  --  1:05:20 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .MODEL SMALL
[   2]        :                                       
[   3]        :                                       .DATA
[   4]        :                                       
[   5]    0000: 01 01 01 01                           	CADENA DB 1,1,1,1
[   6]    0004: 80 40 20 10 08 04 02 01               	PESO DB 128,64,32,16,8,4,2,1
[   7]        :                                       	
[   8]    000C: 00                                    	BINARIO_NAT DB 0; Valor en binario natural
[   9]    000D: 00                                    	COMP_1 DB 0
[  10]    000E: 00                                    	COMP_2 DB 0
[  11]    000F: 00                                    	EXCESO DB 0
[  12]    0010: 00                                    	BIN_SIG DB 0
[  13]        :                                       	
[  14]    0011: 00 00 00 00 00 00 00 00               	EXT_BINAT DB 0,0,0,0,0,0,0,0
[  15]    0019: 00 00 00 00 00 00 00 00               	EXT_C2 DB 0,0,0,0,0,0,0,0
[  16]    0021: 00 00 00 00 00 00 00 00               	EXT_C1 DB 0,0,0,0,0,0,0,0
[  17]    0029: 00 00 00 00 00 00 00 00               	EXT_EXCESO DB 0,0,0,0,0,0,0,0
[  18]    0031: 00 00 00 00 00 00 00 00               	EXT_BINSIG DB 0,0,0,0,0,0,0,0
[  19]        :                                       
[  20]        :                                       		
[  21]        :                                       
[  22]        :                                       .CODE
[  23]        :                                       
[  24]    0040: B8 00 00                              	MOV AX, SEG CADENA
[  25]    0043: 8E D8                                 	MOV DS, AX
[  26]        :                                       
[  27]    0045: BB 00 00                              	MOV BX, 0
[  28]    0048: BE 00 00                              	MOV SI, 0
[  29]        :                                       
[  30]        :                                       	;Binario natural
[  31]    004B:                                       	EXTENSION:
[  32]    004B: 8A 04                                 	    MOV AL, CADENA[SI]
[  33]    004D: 88 44 15                              	    MOV EXT_BINAT[SI+4], AL;Copiamos los bits significativos en las posiciones de menor peso
[  34]        :                                       	
[  35]    0050: 46                                    	    INC SI
[  36]    0051: 83 FE 04                              	    CMP SI, 4
[  37]    0054: 72 F5                                 	JB EXTENSION
[  38]        :                                       	
[  39]    0056: BE 07 00                              	MOV SI, 7
[  40]        :                                       	
[  41]    0059:                                       	BUCLE:;Aplicamos el calculo del binario natural sobre la cadena extendida
[  42]    0059: 8A 44 11                              		MOV AL, EXT_BINAT[SI]
[  43]    005C: F6 64 04                              		MUL PESO[SI]
[  44]    005F: 02 D8                                 		ADD BL, AL
[  45]        :                                       
[  46]    0061: 4E                                    		DEC SI
[  47]    0062: 75 F5                                 	JNZ BUCLE;Salimos si SI = 0
[  48]        :                                       		
[  49]    0064: 88 1E 0C 00                           	MOV BINARIO_NAT, BL
[  50]        :                                       	
[  51]        :                                       	;Binario con signo
[  52]    0068: 8A 1E 00 00                           	MOV BL, CADENA[0]
[  53]    006C: 88 1E 31 00                           	MOV EXT_BINSIG[0], BL;Copiamos el bit de signo en la posicion de mayor peso
[  54]        :                                       	
[  55]    0070: BE 01 00                              	MOV SI, 1
[  56]    0073: BB 00 00                              	MOV BX, 0
[  57]        :                                       	
[  58]    0076:                                       	EXT_SIG:;Obtenemos la cadena extendida
[  59]    0076: 8A 04                                 	    MOV AL, CADENA[SI]
[  60]    0078: 88 44 35                              	    MOV EXT_BINSIG[SI+4], AL;Copiamos los bits significativos en las posiciones mas bajas
[  61]        :                                       	
[  62]    007B: 46                                    	    INC SI
[  63]    007C: 83 FE 04                              	    CMP SI, 4
[  64]    007F: 72 F5                                 	JB EXT_SIG
[  65]        :                                       	
[  66]    0081: BE 01 00                              	MOV SI, 1
[  67]        :                                       	
[  68]    0084:                                       	SUMA:
[  69]    0084: 8A 44 31                              	    MOV AL, EXT_BINSIG[SI]
[  70]    0087: F6 64 04                              	    MUL PESO[SI]
[  71]    008A: 02 D8                                 	    ADD BL, AL
[  72]        :                                       	
[  73]    008C: 46                                    	    INC SI
[  74]    008D: 83 FE 08                              	    CMP SI, 8
[  75]    0090: 72 F2                                 	JB SUMA
[  76]        :                                       
[  77]        :                                       	
[  78]    0092: 80 3E 31 00 01                        	CMP EXT_BINSIG[0], 1
[  79]    0097: 74 02                                 	JE NEGATIVO
[  80]    0099: 75 02                                 	JNE SEGUIR
[  81]        :                                       	
[  82]        :                                       	
[  83]    009B:                                       	NEGATIVO:
[  84]    009B: F7 DB                                 	    NEG BX
[  85]        :                                       	
[  86]    009D:                                       	SEGUIR:
[  87]        :                                       	
[  88]    009D: 88 1E 10 00                           	MOV BIN_SIG, BL
[  89]        :                                       	
[  90]        :                                       	
[  91]        :                                       
[  92]        :                                       	;Complemento a 2
[  93]    00A1: B9 00 00                              	MOV CX, 0
[  94]    00A4: BE 00 00                              	MOV SI, 0
[  95]        :                                       	
[  96]    00A7:                                       	COPIA_MP:;Copiamos el bit de mayor peso en las primeras 4 posiciones
[  97]    00A7: A0 00 00                              		MOV AL, CADENA[0]
[  98]    00AA: 88 44 19                              		MOV EXT_C2[SI], AL
[  99]        :                                       
[ 100]    00AD: 46                                    INC SI
[ 101]    00AE: 83 FE 04                              		CMP SI, 4
[ 102]    00B1: 72 F4                                 	JB COPIA_MP
[ 103]        :                                       	
[ 104]    00B3: BE 00 00                              	MOV SI, 0
[ 105]        :                                       	
[ 106]    00B6:                                       	COPIA_BITS:;Copiamos el numero original en las 4 ultimas posiciones
[ 107]    00B6: 8A 04                                 		MOV AL, CADENA[SI]
[ 108]    00B8: 88 44 1D                              		MOV EXT_C2[SI+4], AL
[ 109]        :                                       
[ 110]    00BB: 46                                    		INC SI
[ 111]    00BC: 83 FE 04                              		CMP SI, 4
[ 112]    00BF: 72 F5                                 	JB COPIA_BITS
[ 113]        :                                       	
[ 114]    00C1: BE 00 00                              	MOV SI, 0
[ 115]        :                                       	
[ 116]    00C4:                                       	BUCLE1:;Calculamos valor en binario natural de la cadena extendida
[ 117]    00C4: 8A 44 19                              		MOV AL, EXT_C2[SI]
[ 118]    00C7: F6 64 04                              		MUL PESO[SI]
[ 119]    00CA: 02 C8                                 		ADD CL, AL
[ 120]        :                                       		
[ 121]    00CC: 46                                    		INC SI
[ 122]    00CD: 83 FE 08                              		CMP SI, 8   		
[ 123]    00D0: 72 F2                                 	JB BUCLE1
[ 124]        :                                       	
[ 125]    00D2: 80 3E 19 00 01                        	CMP EXT_C2[0], 1;Comprobamos si el numero es negativo o positivo
[ 126]    00D7: 74 02                                 	JE RESTA_C2
[ 127]    00D9: 75 09                                 	JNE SIGUE_C2
[ 128]        :                                       	
[ 129]    00DB:                                       	RESTA_C2:
[ 130]    00DB: BB 00 01                              	    MOV BX, 256
[ 131]    00DE: 2B D9                                 	    SUB BX, CX
[ 132]    00E0: 8A CB                                 	    MOV CL, BL
[ 133]    00E2: F6 D9                                 	    NEG CL
[ 134]        :                                       	
[ 135]    00E4:                                       	SIGUE_C2:
[ 136]        :                                       	
[ 137]    00E4: 88 0E 0E 00                           	MOV COMP_2, CL
[ 138]        :                                       	
[ 139]        :                                       	;Complemento a 1
[ 140]    00E8: B9 00 00                              	MOV CX, 0
[ 141]    00EB: BE 00 00                              	MOV SI, 0
[ 142]        :                                       	
[ 143]    00EE:                                       	COPIA_MP2:;Copiamos el bit de mayor peso en las primeras 4 posiciones
[ 144]    00EE: A0 00 00                              		MOV AL, CADENA[0]
[ 145]    00F1: 88 44 21                              		MOV EXT_C1[SI], AL
[ 146]        :                                       
[ 147]    00F4: 46                                    		INC SI
[ 148]    00F5: 83 FE 04                              		CMP SI, 4
[ 149]    00F8: 72 F4                                 	JB COPIA_MP2
[ 150]        :                                       	
[ 151]    00FA: BE 00 00                              	MOV SI, 0
[ 152]        :                                       	
[ 153]    00FD:                                       	COPIA_BITS2:;Copiamos el numero original en las 4 ultimas posiciones
[ 154]    00FD: 8A 04                                 		MOV AL, CADENA[SI]
[ 155]    00FF: 88 44 25                              		MOV EXT_C1[SI+4], AL
[ 156]        :                                       
[ 157]    0102: 46                                    		INC SI
[ 158]    0103: 83 FE 04                              		CMP SI, 4
[ 159]    0106: 72 F5                                 	JB COPIA_BITS2
[ 160]        :                                       	
[ 161]    0108: BE 00 00                              	MOV SI, 0
[ 162]        :                                       	
[ 163]    010B:                                       	BUCLE2:;Calculamos el valor en binario natural de la cadena extendida
[ 164]    010B: 8A 44 21                              		MOV AL, EXT_C1[SI]
[ 165]    010E: F6 64 04                              		MUL PESO[SI]
[ 166]    0111: 02 C8                                 		ADD CL, AL
[ 167]        :                                       		
[ 168]    0113: 46                                    		INC SI
[ 169]    0114: 83 FE 08                              		CMP SI, 8   		
[ 170]    0117: 72 F2                                 	JB BUCLE2
[ 171]        :                                       	
[ 172]    0119: 80 3E 21 00 01                        	CMP EXT_C1[0], 1;Comprobamos si el numero es negativo o positivo
[ 173]    011E: 74 02                                 	JE RESTA_C1
[ 174]    0120: 75 08                                 	JNE SIGUE_C1
[ 175]        :                                       	
[ 176]    0122:                                       	RESTA_C1:
[ 177]    0122: B3 FF                                 	    MOV BL, 255
[ 178]    0124: 2A D9                                 	    SUB BL, CL
[ 179]    0126: 8A CB                                 	    MOV CL, BL
[ 180]    0128: F6 D9                                 	    NEG CL
[ 181]        :                                       	
[ 182]    012A:                                       	SIGUE_C1:
[ 183]        :                                       	
[ 184]    012A: 88 0E 0D 00                           	MOV COMP_1, CL
[ 185]        :                                       	
[ 186]        :                                       	
[ 187]        :                                       	;Exceso 2^(n-1)
[ 188]    012E: BB 00 00                              	MOV BX, 0
[ 189]    0131: BE 00 00                              	MOV SI, 0
[ 190]        :                                       
[ 191]    0134:                                       EXTENSION_EX:
[ 192]    0134: 8A 04                                 	    MOV AL, CADENA[SI]
[ 193]    0136: 88 44 2D                              	    MOV EXT_EXCESO[SI+4], AL
[ 194]        :                                       	
[ 195]    0139: 46                                    	    INC SI
[ 196]    013A: 83 FE 04                              	    CMP SI, 4
[ 197]    013D: 72 F5                                 	JB EXTENSION_EX
[ 198]        :                                       
[ 199]    013F: BE 00 00                              MOV SI, 0
[ 200]        :                                       
[ 201]    0142:                                       	BUCLE3:
[ 202]    0142: 8A 44 29                              		MOV AL, EXT_EXCESO[SI]
[ 203]    0145: F6 64 04                              		MUL PESO[SI]
[ 204]    0148: 03 D8                                 		ADD BX, AX
[ 205]        :                                       
[ 206]    014A: 46                                    		INC SI
[ 207]    014B: 83 FE 08                              		CMP SI, 8; Comparar SI con 0
[ 208]    014E: 72 F2                                 	JB BUCLE3; Salir si SI > 7
[ 209]        :                                       	
[ 210]    0150: 80 EB 08                              	SUB BL, 8;Restamos el exceso al resultado en binario natural
[ 211]    0153: 88 1E 0F 00                           	MOV EXCESO, BL
[ 212]        :                                       	
[ 213]    0157: B4 4C                                 	MOV AH, 4Ch
[ 214]    0159: CD 21                                 	INT 21h
[ 215]        :                                       
[ 216]        :                                       END
[ 217]        :                                       
[ 218]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 5B      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 01      -   check sum (l.byte)
0013: 68      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 04      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 04      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
